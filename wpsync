#!/bin/bash -u

# to do:
# add date to backup files date +%Y-%m-%d
#

#-----------------------------------------------------------
# wpsync version 0.0.2
# installation: ln -s /path/to/wpsync /usr/local/bin/wpsync
# ----------------------------------------------------------



# pretty colours
if [ "$TERM" != "dumb" ]; then
    red=$(tput setaf 1 || tput AF 1)
    green=$(tput setaf 2 || tput AF 2)
    yellow=$(tput setaf 3 || tput AF 3)
    blue=$(tput setaf 4 || tput AF 4)
    magenta=$(tput setaf 5 || tput AF 5)
    cyan=$(tput setaf 6 || tput AF 6)
    reset=$(tput sgr0)
    bold=$(tput bold)
else
    red=
    green=
    yellow=
    blue=
    magenta=
    cyan=
    reset=
    bold=
fi


help (){
  echo "${blue}Available commands:"
  echo "–––––"
  echo "push_db"
  echo "push_files"
  echo "–––––"
  echo "pull_db"
  echo "pull_files"
  echo "–––––${reset}"

}


push_db () {

  echo "dump local db"

  if [ -n "${l_db_user+x}" ] && [ -n "${l_db_pass+x}" ] ; then

    mysqldump -u $l_db_user -p$l_db_pass $l_db_name > $wpsyncdir/local-db.sql

  elif [ -n "${l_db_user+x}" ] ; then

    mysqldump -u $l_db_user $l_db_name > $wpsyncdir/local-db.sql

  elif [ -n "${l_db_pass+x}" ] ; then

    mysqldump -p$l_db_pass $l_db_name > $wpsyncdir/local-db.sql

  else

    mysqldump $l_db_name > $wpsyncdir/local-db.sql 

  fi

  #search and replace
  cp $wpsyncdir/local-db.sql $wpsyncdir/local-db.$current_date.sql.bak
  sed -i "" "s,$l_web_addr,$r_web_addr,g" $wpsyncdir/local-db.sql

  if [ -n "${r_db_charset+x}" ] && [ -n "${l_db_charset+x}" ] ; then

    echo "search replace database charset"

    sed -i "" "s,$l_db_charset,$r_db_charset,g" $wpsyncdir/local-db.sql

  fi

  echo "create .wpsync directory if it does not exist yet"

  ssh $r_user@$r_host "mkdir $r_dir/$wpsyncdir"

  echo "uploading local db"

  scp $wpsyncdir/local-db.sql $r_user@$r_host:$r_dir/$wpsyncdir/

  rm $wpsyncdir/local-db.sql

  echo "${green}ready.${reset}"

  echo "dumping remote db as backup && populate remote db with local db"

  if [ -n "${r_db_host+x}" ] ; then

    ssh $r_user@$r_host "mysqldump -h $r_db_host -u $r_db_user -p$r_db_pass $r_db_name > $r_dir/$wpsyncdir/remote-db.sql \
    && mysql -u $r_db_user -h $r_db_host -p$r_db_pass $r_db_name < $r_dir/$wpsyncdir/local-db.sql"

  else

    ssh $r_user@$r_host "mysqldump -u $r_db_user -p$r_db_pass $r_db_name > $r_dir/$wpsyncdir/remote-db.sql \
    && mysql -u $r_db_user -p$r_db_pass $r_db_name < $r_dir/$wpsyncdir/local-db.sql"

  fi

  echo "ready."

}

pull_db(){

  echo "dump local db as backup"

  if [ -n "${l_db_user+x}" ] && [ -n "${l_db_pass+x}" ] ; then

    mysqldump -u $l_db_user -p$l_db_pass $l_db_name > $wpsyncdir/local-db.${current_date}.sql.bak

  elif [ -n "${l_db_user+x}" ] ; then

    mysqldump -u $l_db_user $l_db_name > $wpsyncdir/local-db.${current_date}.sql.bak

  elif [ -n "${l_db_pass+x}" ] ; then

    mysqldump -p$l_db_pass $l_db_name > $wpsyncdir/local-db.${current_date}.sql.bak

  else

    mysqldump $l_db_name > $wpsyncdir/local-db.${current_date}.sql.bak

  fi

  echo "dump remote db"

  if [ -n "${r_db_host+x}" ] ; then

    ssh $r_user@$r_host "mysqldump -h $r_db_host -u $r_db_user -p$r_db_pass $r_db_name > $r_dir/$wpsyncdir/remote-db.sql"

  else

    ssh $r_user@$r_host "mysqldump -u $r_db_user -p$r_db_pass $r_db_name > $r_dir/$wpsyncdir/remote-db.sql"

  fi

  echo "downloading remote db"

  scp $r_user@$r_host:$r_dir/$wpsyncdir/remote-db.sql $wpsyncdir/remote-db.sql

  #remove remote dumpfile:
  ssh $r_user@$r_host "rm $r_dir/$wpsyncdir/remote-db.sql"

  echo "${green}ready.${reset}"

  echo "search replace web address strings"

  sed -i "" "s,$r_web_addr,$l_web_addr,g" $wpsyncdir/remote-db.sql

  if [ -n "${r_db_charset+x}" ] && [ -n "${l_db_charset+x}" ] ; then

    echo "search replace database charset"

    sed -i "" "s,$r_db_charset,$l_db_charset,g" $wpsyncdir/remote-db.sql

  fi

  echo "populate local db with remote db"

  if [ -n "${l_db_user+x}" ] && [ -n "${l_db_pass+x}" ] ; then

    mysql -u $l_db_user -p$l_db_pass $l_db_name < $wpsyncdir/remote-db.sql

  elif [ -n "${l_db_user+x}" ] ; then

    mysql -u $l_db_user $l_db_name < $wpsyncdir/remote-db.sql

  elif [ -n "${l_db_pass+x}" ] ; then

    mysql -p$l_db_pass $l_db_name < $wpsyncdir/remote-db.sql

  else

    mysql $l_db_name < $wpsyncdir/remote-db.sql

  fi

  echo "cleanup"
  #remove remote sql dump locally
  rm $wpsyncdir/remote-db.sql

  echo "${green}ready.${reset}"

}


push_files () {

  echo "pushing files via rsync …"

  rsync -a $l_upload_dir/ $r_user@$r_host:$r_upload_dir/

  echo "${green}ready.${reset}"


}


pull_files () {

  echo "pulling files via rsync …"

  rsync -a $r_user@$r_host:$r_upload_dir/ $l_upload_dir/

  echo "${green}ready.${reset}"

}


push_plugins () {

  echo "pushing plugins via rsync …"

  rsync -a $l_plugin_dir/ $r_user@$r_host:$r_plugin_dir/

  echo "${green}ready.${reset}"

}


pull_plugins () {

  echo "pulling plugins via rsync …"

  rsync -a $l_plugin_dir/ $r_user@$r_host:$r_plugin_dir/

  echo "${green}ready.${reset}"

}








# ====================================
#  ACTUAL SCRIPT EXECUTION
# ====================================

echo ${yellow}
echo "–––––––––––––"
echo "wpSync v0.0.3"
echo "–––––––––––––"
echo "${reset}"


wpsyncdir=".wpsync"
current_date=$(date +%Y-%m-%d-%H-%M)

if [ ! -f $wpsyncdir/config ]
then
    help
    echo "${red}Config file does not exist${reset}"
    echo
    exit 1
else
    echo "${green}Config file found. Sourcing variables${reset}"
    echo
fi


source $wpsyncdir/config

# automatically set upload dirs if they are not provided in the config file

if [ -z "${l_upload_dir:-}" ] ; then
  l_upload_dir="wp-content/uploads"
fi

if [ -z "${r_upload_dir:-}" ] ; then
  r_upload_dir="${r_dir}/wp-content/uploads"
fi

# automatically set plugin dirs if they are not provided in the config file

if [ -z "${l_plugin_dir:-}" ] ; then
  l_plugin_dir="wp-content/plugins"
fi

if [ -z "${r_plugin_dir:-}" ] ; then
  r_plugin_dir="${r_dir}/wp-content/plugins"
fi


for var in r_user r_host r_dir r_web_addr l_web_addr l_db_name l_db_pass l_db_user r_db_name r_db_user r_db_pass r_db_host l_upload_dir r_upload_dir l_db_charset r_db_charset l_plugin_dir r_plugin_dir; do
    if [ -n "$var+x" ] ; then
        echo "$var is set to ${var}"
    else
        echo "${red}$var is not set${reset}"
        #echo "exiting …"
        #exit 1
    fi
done


# if an argument is passed (the number of arguments is not equal to zero), then check if that command is valid or not.
if [ $# -ne 0 ]
then
    # place all the command names in an array
    declare -a list_of_methods=(push_db push_files pull_db pull_files push_plugins pull_plugins help)

    # function to check if an item exists in an array
    contains_element () {
      local e
      for e in "${list_of_methods[@]}"
          do [[ "$e" == "${1:-help}" ]] && return 0
      done
      return 1
    }

    contains_element "$@"

    # if command is invalid, list the valid ones
    if [[ $? -eq 1 ]]
    then
        echo Error: Command not found!
        echo

        help
        exit 1
    fi

fi

# script will execute whichever method is passed to it as an argument.
# The default is to run the `push` method.
${@:-help}


exit
